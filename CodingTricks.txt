- If we have got just TreeNode* root and it has so many children. How do you build the adjacency list?

```
void buildGraph(Node* root, unordered_map<Node*, vector<Node*>>& graph) {
    if (root == NULL)
        return;

    for (auto vec: root->children) {
        graph[root].push_back(vec);
        graph[vec].push_back(root);
        buildGraph(vec, graph);
    }
    return;
}
```

- Fill the set;

```
return nums.size() > set<int>(nums.begin(), nums.end()).size();

```

- Tree Traversals;

(a) Inorder (Left, Root, Right) : 4 2 5 1 3 
(b) Preorder (Root, Left, Right) : 1 2 4 5 3 
(c) Postorder (Left, Right, Root) : 4 5 2 3 1

- Tokens in C++;

        istringstream ss(data);
        string token;
        while(getline(ss, token, ','))
            tokens.push_back(token);
            
            
- USe cases of Trie;

```
This article introduces the data structure trie. It could be pronounced in two different ways: as "tree" or "try". 
Trie which is also called a digital tree or a prefix tree is a kind of search ordered tree data structure mostly used for the efficient dynamic add/search operations with the strings.
Trie is widely used in real life: autocomplete search, spell checker, T9 predictive text, IP routing (longest prefix matching), some GCC containers.

Against hashmap();
Finding all keys with a common prefix.

Enumerating a dataset of strings in lexicographical order.

Scaling for the large datasets. Once the hash table increases in size, there are a lot of hash collisions and the search time complexity could degrade to \mathcal{O}(N^2 \cdot M)O(N 
2
 ⋅M), where NN is the number of the inserted keys.

Trie could use less space compared to hashmap when storing many keys with the same prefix. In this case, using trie has only \mathcal{O}(M \cdot N)O(M⋅N) time complexity, where MM is the key length, and NN is the number of keys.
```


- Sorting using comparator;
sort(intervals.begin(), intervals.end(), [](vector<int> interval1, vector<int> interval2) { return interval1[0] < interval2[0]; });


- Requirements for coding;
#include <iostream>
using namespace std;


- Definition of Binary Tree;

 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };


- Priority Queue in C++ for pairs;

// By default a max heap is created ordered
// by first element of pair.
priority_queue<pair<int, int> > pq;

typedef pair<int, int> pi;
// By default a min heap is created ordered
// by first element of pair.
priority_queue<pi, vector<pi>, greater<pi> > pq;


priority_queue<pair<int, int>, vector<pair<int, int>>, comparator> pq;
struct comparator {
    bool operator() (const pair<int, int>& a, const pair<int, int>& b) {
        if (a.first == b.first)
            return a.second > b.second;
        return a.first < b.first;
    }
};

- Make pair;
make_pair (10,20);


- Sort with lambda function
sort(T.begin(), T.end(), [&](char a, char b) { return vec[a - 'a'] < vec[b - 'a']; });


- If any substring is required after a particular character, then?
path.substr(path.find_last_of('/') + 1)


------ Always remember to find the shortest path via BFS, remember to make a use of visited boolesn.


Which approach to choose, BFS or DFS?

The problem is to return a list of last elements from all levels, so it's the way more natural to implement BFS here.

Time complexity is the same \mathcal{O}(N)O(N) both for DFS and BFS since one has to visit all nodes.

Space complexity is \mathcal{O}(H)O(H) for DFS and
\mathcal{O}(D)O(D) for BFS, where HH is a tree height, and DD is a tree diameter. They both result in \mathcal{O}(N)O(N) space in the worst-case scenarios: skewed tree for DFS and complete tree for BFS.





// In order to insert elements into vector from beginning;
result.insert(result.begin(), pq.top().first);




// DFS TC
Simple traversing of nodes using DFS gives O(V+E). This DFS prints all possible paths. Hence its worst time can be O(VE), best case can be O(V+E)



// Convert character to string
- string str(1, c);
- str.push_back(c);


// Priority_queue filling
priority_queue<int> pq(begin(stones), end(stones));

// Modulus
int mod = 1e9 +7;

// Generate all the substrings;
O(N3)
void substrings(string s) {
for(int i = 0; i < s.length(); i++) {
    for(int j = 1; j <= s.length() - i; j++) {
        s.substr(i, j);
    }
}

// Sorting custom order syntax
sort(T.begin(), T.end(), [&](char a, char b) { return vec[a - 'a'] < vec[b - 'a']; });

// Binary search;
arr = [1,2,3,3,4,5,6];
x = 2
lower_bound(arr.begin(), arr.end(), x) - arr.begin() ------> index 1;
x = 7
lower_bound(arr.begin(), arr.end(), 7) - arr.begin() ------> index 7 outside of vector;
lower_bound will give the first index of the element found

x = 4
upper_bound(arr.begin(), arr.end(), x) - arr.begin() ----> next index which is 5
x = 3
upper_bound(arr.begin(), arr.end(), x) - arr.begin() ----> next index which is 4
upper_bound will give the next index of the element found

String comparison
a.compare(b) = 0 if it matches. < 0 if lesser of length of a < length of b. > 0 opposite of lesser


typedef pair<int, int> pi;


static bool comparator(const pair<string, int>& a1, const pair<string, int>& a2) {
    return a1.second < a2.second;
}

sort(words.begin(), words.end(), comparator);


<algorithm>
#include <array>
#include <cctype>
#include <climits>
#include <cmath>
#include <deque>
#include <iostream>
#include <iterator>
#include <list>
#include <map>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <atomic>
#include <condition_variable>
#include <future>



Custom Comparator in priority_queue
Likewise, how we passed greater<datatype> an inbuilt comparator, we can also pass a user-defined comparator to priority_queue.
You should declare a class Compare and overload operator() function.
class Compare {
    public:
       bool operator()(T a, T b){
           if(cond){
               return true;
           }
           return false;
      }
};
When true is returned, it means the order is correct and NO swapping of elements takes place.
When false is returned, it means the order is NOT correct and swapping of elements takes place.

